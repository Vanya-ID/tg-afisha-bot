import axios from 'axios';
import * as cheerio from 'cheerio';
import dotenv from 'dotenv';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { createClient } from 'redis';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6379';
const URL = 'https://puppet-minsk.by/afisha';
const CHECK_INTERVAL = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const PORT = process.env.PORT || 3000;

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// Healthcheck endpoint
app.get('/', (req, res) => {
  res.status(200).send('OK');
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Redis
const redisClient = createClient({
  url: REDIS_URL
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
redisClient.on('error', (err) => console.error('Redis Client Error:', err));

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
if (!TELEGRAM_TOKEN) {
  throw new Error('TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

interface Show {
  date: string;
  time: string;
  name: string;
  url: string;
}

const parseShows = async (): Promise<Show[]> => {
  try {
    const response = await axios.get(URL);
    const $ = cheerio.load(response.data);
    const shows: Show[] = [];

    $('.afisha_item').each((_, element) => {
      const day = $(element).find('.afisha-day').text().trim();
      const time = $(element).find('.afisha-time').text().trim();
      const name = $(element).find('.afisha-title').text().trim();
      const url = $(element).find('.afisha_item-hover').attr('href') || '';

      if (day && time && name) {
        shows.push({
          date: day,
          time,
          name,
          url: `https://puppet-minsk.by${url}`
        });
      }
    });

    return shows;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞:', error);
    return [];
  }
};

const sendTelegramMessage = async (show: Show): Promise<void> => {
  if (!TELEGRAM_CHAT_ID) {
    throw new Error('TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  try {
    const message = `üé≠ ${show.name}\nüìÖ ${show.date}\n‚è∞ ${show.time}\nüîó ${show.url}`;
    await bot.sendMessage(TELEGRAM_CHAT_ID, message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
};

const isShowSent = async (show: Show): Promise<boolean> => {
  const key = `${show.date}|${show.time}|${show.name}|${show.url}`;
  const result = await redisClient.get(key);
  return result !== null;
};

const markShowAsSent = async (show: Show): Promise<void> => {
  const key = `${show.date}|${show.time}|${show.name}|${show.url}`;
  await redisClient.set(key, 'sent');
};

const checkNewShows = async (): Promise<void> => {
  try {
    const shows = await parseShows();

    for (const show of shows) {
      if (!(await isShowSent(show))) {
        await sendTelegramMessage(show);
        await markShowAsSent(show);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∞—Ñ–∏—à:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
const startMonitoring = async (): Promise<void> => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redisClient.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ñ–∏—à–∏...');

    while (true) {
      await checkNewShows();
      await new Promise(resolve => setTimeout(resolve, CHECK_INTERVAL));
    }
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startMonitoring().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 