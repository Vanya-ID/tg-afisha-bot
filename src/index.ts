import axios from 'axios';
import * as cheerio from 'cheerio';
import dotenv from 'dotenv';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { createClient } from 'redis';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6379';
const URL = 'https://puppet-minsk.by/afisha';
const CHECK_INTERVAL = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const PORT = process.env.PORT || 3000;
const HEARTBEAT_HOUR = 9;
const HEARTBEAT_MINUTE = 0;

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// Healthcheck endpoint
app.get('/', (req, res) => {
  res.status(200).send('OK');
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Redis
const redisClient = createClient({
  url: REDIS_URL,
  socket: {
    reconnectStrategy: (retries) => {
      if (retries > 10) {
        console.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis');
        return new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫');
      }
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      return Math.min(retries * 1000, 10000);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
redisClient.on('error', (err) => {
  console.error('Redis Client Error:', err);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ Redis
});

redisClient.on('connect', () => {
  console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis');
});

redisClient.on('reconnecting', () => {
  console.log('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
if (!TELEGRAM_TOKEN) {
  throw new Error('TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

interface Show {
  date: string;
  time: string;
  name: string;
  url: string;
}

const parseShows = async (): Promise<Show[]> => {
  try {
    const response = await axios.get(URL);
    const $ = cheerio.load(response.data);
    const shows: Show[] = [];

    $('.afisha_item').each((_, element) => {
      const day = $(element).find('.afisha-day').text().trim();
      const time = $(element).find('.afisha-time').text().trim();
      const name = $(element).find('.afisha-title').text().trim();
      const url = $(element).find('.afisha_item-hover').attr('href') || '';

      if (day && time && name) {
        shows.push({
          date: day,
          time,
          name,
          url: `https://puppet-minsk.by${url}`
        });
      }
    });

    return shows;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞:', error);
    return [];
  }
};

const sendTelegramMessage = async (show: Show): Promise<void> => {
  if (!TELEGRAM_CHAT_ID) {
    throw new Error('TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  try {
    const message = `üé≠ ${show.name}\nüìÖ ${show.date}\n‚è∞ ${show.time}\nüîó ${show.url}`;
    await bot.sendMessage(TELEGRAM_CHAT_ID, message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
};

const sendHeartbeatMessage = async (): Promise<void> => {
  if (!TELEGRAM_CHAT_ID) {
    throw new Error('TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  try {
    const now = new Date();
    const timeLabel = now.toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' });
    const message = `‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\nüïí ${timeLabel}`;
    await bot.sendMessage(TELEGRAM_CHAT_ID, message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
};

const getIsoDate = (date: Date): string => {
  return date.toISOString().slice(0, 10);
};

const isHeartbeatSent = async (isoDate: string): Promise<boolean> => {
  const key = `heartbeat|${isoDate}`;
  const result = await redisClient.get(key);
  return result !== null;
};

const markHeartbeatSent = async (isoDate: string): Promise<void> => {
  const key = `heartbeat|${isoDate}`;
  await redisClient.set(key, 'sent', { EX: 60 * 60 * 24 * 60 });
};

const sendDailyHeartbeatIfDue = async (): Promise<void> => {
  const now = new Date();
  const isoDate = getIsoDate(now);

  const alreadySent = await isHeartbeatSent(isoDate);
  if (alreadySent) return;

  const isAfterScheduledTime = now.getHours() > HEARTBEAT_HOUR || (now.getHours() === HEARTBEAT_HOUR && now.getMinutes() >= HEARTBEAT_MINUTE);
  if (!isAfterScheduledTime) return;

  await sendHeartbeatMessage();
  await markHeartbeatSent(isoDate);
  console.log('‚úîÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏');
};

const isShowSent = async (show: Show): Promise<boolean> => {
  const key = `${show.date}|${show.time}|${show.name}|${show.url}`;
  const result = await redisClient.get(key);
  return result !== null;
};

const markShowAsSent = async (show: Show): Promise<void> => {
  const key = `${show.date}|${show.time}|${show.name}|${show.url}`;
  await redisClient.set(key, 'sent');
};

const checkNewShows = async (): Promise<void> => {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ñ–∏—à–∏...');
    const shows = await parseShows();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${shows.length} —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π`);

    let newShows = 0;
    for (const show of shows) {
      if (!(await isShowSent(show))) {
        console.log(`üé≠ –ù–æ–≤—ã–π —Å–ø–µ–∫—Ç–∞–∫–ª—å: ${show.name} (${show.date} ${show.time})`);
        await sendTelegramMessage(show);
        await markShowAsSent(show);
        newShows++;
      }
    }

    if (newShows > 0) {
      console.log(`‚ú® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${newShows} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    } else {
      console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∞—Ñ–∏—à:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
const startMonitoring = async (): Promise<void> => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let retries = 0;
    const maxRetries = 5;

    while (retries < maxRetries) {
      try {
        await redisClient.connect();
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        break;
      } catch (error) {
        retries++;
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`, error);
        if (retries === maxRetries) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }

    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ñ–∏—à–∏...');

    while (true) {
      try {
        await checkNewShows();
        await sendDailyHeartbeatIfDue();
        console.log(`‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ${CHECK_INTERVAL / 1000 / 60} –º–∏–Ω—É—Ç...`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∞—Ñ–∏—à:', error);
      }
      await new Promise(resolve => setTimeout(resolve, CHECK_INTERVAL));
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startMonitoring().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 